package vmonastyrov

import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import kotlin.system.measureTimeMillis

/**
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 **/

class Problem12Test {
    @Test
    fun testTriangle() {
        val triangles = listOf(1, 3, 6, 10, 15, 21, 28, 36, 45, 55)
        Assertions.assertArrayEquals(triangles.toIntArray(), (1L..10L).map { getTriangle(it) }.map {it.toInt()}.toIntArray())
    }

    @Test
    fun testDividers() {
        val dividers = listOf(listOf(1), listOf(1, 3), listOf(1, 6, 2, 3), listOf(1, 10, 2, 5), listOf(1, 15, 3, 5),
                listOf(1, 21, 3, 7), listOf(1, 28, 2, 14, 4, 7))
        Assertions.assertArrayEquals(dividers.toTypedArray(), (1L..7L).map { getDividers(getTriangle(it)).map { it.toInt() }}.toTypedArray())
    }

    @Test
    fun testResult() {
        Assertions.assertEquals(28, getResult(5))
        Assertions.assertEquals(73920, getResult(100))
        val exTime = measureTimeMillis {
            val res = getResult(500)
            println("value = $res")
        }
        println("execution time = $exTime")
    }
}
