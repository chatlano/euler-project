package vmonastyrov

import kotlin.math.sqrt

/**

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

 **/

fun getTriangle(n: Long): Long = n*(n+1) / 2

// naive implementation O(n)
//fun getDividers(n: Long): List<Long> = (1..n).filter { (n % it) == 0L  }

// better implementation O(sqrt(n))
fun getDividers(n: Long): List<Long> = when(n) {
    1L -> listOf(1)
    else -> {
        val sqrt = sqrt(n.toDouble()).toLong()
        (1..sqrt).mapNotNull { if (n % it == 0L) listOf(it, n / it) else null }.flatten()
    }
}
// TODO implement method using factoring

fun getResult(sizeLimit: Int) : Long {
    var triangleInx = 1L
    while (getDividers(getTriangle(triangleInx)).size < sizeLimit) {
        triangleInx += 1L
    }
    return getTriangle(triangleInx)
}